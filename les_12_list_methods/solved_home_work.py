"""
Домашнее задание по list - решение
"""
import time

# задание 1

"""
Программа спрашивает у пользователя сколько кошельков нужно сгенерировать.
Программа генерирует список выбранного количества случайных кошельков.
Кошельки должны иметь адрес как настоящие кошельки в формате "0x" + 40 случайных символов из набора "abcdef0123456789" (16-ричная система исчисления).
Программа спрашивает сколько дропов нужно раздать.
Программа рандомно раздает дропы на кошельки, eсли кошелек уже получил дроп, то он НЕ может получить его повторно.
В конце программа должна вывести список кошельков которые получили под дроп, каждый кошелек с новой строки.
Далее программа должна заклеймить дроп с каждого кошелька:
- клейм должен происходить в рандомном порядке с рандомной паузой, чтобы не связать кошельки
- клейм должен быть только у кошельков с дропом
- 1 кошелек должен клеймить дроп только 1 раз

Далее программа должна создать список субкошельков на бирже по количеству кошельков с дропами.
Программа должна в рандомном порядке вывести токены с кошельков на кошельки субаккаунтов.
Важно соблюдать правило что 1 кошелек может вывести токены только на 1 кошелек субаккаунта, иначе кошельки свяжутся.
"""

import random

# количество кошельков
wallets_count = int(input("Сколько кошельков нужно сгенерировать: "))
wallets = []
# запускаем цикл создания кошельков, пока в списке не будет нужное количество кошельков
while len(wallets) < wallets_count:
    wallet = "0x"  # начало кошелька

    # добавляем случайные символы в кошелек пока он не станет длиной 42 символа
    while len(wallet) < 42:
        wallet += random.choice("abcdef0123456789")  # добавляем случайный символ

    # проверяем что кошелек уникален
    if wallet not in wallets:
        wallets.append(wallet)  # добавляем кошелек в список

print(f"Сгенерированные кошельки: {wallets}")
print(f"Количество кошельков: {len(wallets)}")

# количество дропов
drops_count = int(input("Сколько дропов нужно раздать: "))
drop_wallets = []
# запускаем цикл раздачи дропов, пока в списке не будет нужное количество кошельков
while len(drop_wallets) < drops_count:
    drop = random.choice(wallets)  # выбираем случайный кошелек
    if drop not in drop_wallets:  # проверяем что кошелек еще не получал дроп
        drop_wallets.append(drop)  # добавляем кошелек в список дропов

print(f"Кошельки с дропами: {drop_wallets}")
print(f"Количество кошельков с дропами: {len(drop_wallets)}")

# клеймим дропы
claim_wallets = drop_wallets.copy()  # копируем список кошельков с дропами
while claim_wallets:  # пока список не пустой
    drop = random.choice(claim_wallets)  # выбираем случайный кошелек с дропом
    print(f"Клеймим дроп с кошелька: {drop}")
    claim_wallets.remove(drop)  # удаляем кошелек из списка дропов

# создаем субкошельки
sub_wallets = []  # список субкошельков
while len(sub_wallets) < len(drop_wallets):  # пока в списке не будет нужное количество кошельков
    sub_wallet = "0x"  # начало кошелька

    # добавляем случайные символы в кошелек пока он не станет длиной 42 символа
    while len(sub_wallet) < 42:
        sub_wallet += random.choice("abcdef0123456789")  # добавляем случайный символ

    # проверяем что кошелек уникален
    if sub_wallet not in sub_wallets:
        sub_wallets.append(sub_wallet)  # добавляем кошелек в список

# выводим токены на субкошельки
while drop_wallets:
    withdraw_wallet = random.choice(drop_wallets)  # выбираем случайный кошелек с дропом
    drop_wallets.remove(withdraw_wallet)  # удаляем кошелек из списка c дропом
    deposit_wallet = random.choice(sub_wallets)  # выбираем случайный субкошелек
    sub_wallets.remove(deposit_wallet)  # удаляем субкошелек из списка
    print(f"Переводим токены с кошелька {withdraw_wallet} на субкошелек {deposit_wallet}")  # выводим информацию о переводе

# задание 2
"""
Создайте список с рандомными активностями
Создайте список из 10 кошельков, кошельки должны иметь адрес как настоящие кошельки в формате "0x" + 40 случайных символов из набора "abcdef0123456789" (16-ричная система исчисления).
Программа должна брать рандомный кошелек и выполнять активности в рандомном порядке.
Нужно чтобы все кошельки отработали все активности по 1 разу.
"""

# список активностей
activities = ["transfer", "swap", "claim", "stake", "unstake", "approve", "deposit", "withdraw", "mint", "burn"]
wallets = []

# запускаем цикл создания кошельков, пока в списке не будет 10 кошельков
while len(wallets) < 10:
    wallet = "0x"  # начало кошелька

    # добавляем случайные символы в кошелек пока он не станет длиной 42 символа
    while len(wallet) < 42:
        wallet += random.choice("abcdef0123456789")  # добавляем случайный символ

    # проверяем что кошелек уникален
    if wallet not in wallets:
        wallets.append(wallet)  # добавляем кошелек в список

while wallets:
    wallet = random.choice(wallets)  # выбираем случайный кошелек
    wallet_activities = activities.copy()  # копируем список активностей
    while wallet_activities:
        activity = random.choice(wallet_activities)  # выбираем случайную активность
        print(f"Кошелек {wallet} выполняет активность {activity}")
        wallet_activities.remove(activity)  # удаляем активность из списка
    wallets.remove(wallet)  # удаляем кошелек из списка

# задание 3

"""
Создайте список из 10 кошельков, кошельки должны иметь адрес как настоящие кошельки в формате "0x" + 40 случайных символов из набора "abcdef0123456789" (16-ричная система исчисления).
Создайте список в котором будут храниться счетчики транзакций по каждому кошельку (изначально сгенерированные случайно от 0 до 3. Каждый счетчик имеет такой же индекс в списке как и кошелек.
Программа должна спрашивать у пользователя сколько минимально транзакций нужно выполнить на кошельках.
Программа должна выбирать:
- либо рандомный кошелек для транзакции и выполнять от 1 до 5 транзакций, увеличивая счетчик транзакций.
- либо кошелек с самым маленьким количеством транзакций и выполнять от 1 до 5 транзакций, увеличивая счетчик транзакций.

Программа должна завершиться когда все кошельки сделают минимальное количество транзакций. Между транзакциями делайте паузу.
"""
import random
import time

wallets = []
transactions = []
target_transactions = int(input("Сколько минимально транзакций нужно выполнить на кошельках: "))
# запускаем цикл создания кошельков, пока в списке не будет 10 кошельков
while len(wallets) < 10:
    wallet = "0x"  # начало кошелька

    # добавляем случайные символы в кошелек пока он не станет длиной 42 символа
    while len(wallet) < 42:
        wallet += random.choice("abcdef0123456789")  # добавляем случайный символ

    # проверяем что кошелек уникален
    if wallet not in wallets:
        wallets.append(wallet)  # добавляем кошелек в список

# заполняем список счетчиков транзакций
while len(transactions) < len(wallets):
    transactions.append(random.randint(0, 3))  # добавляем случайное количество транзакций

index = 0
while index < len(wallets):
    print(f"Кошелек {wallets[index]} имеет {transactions[index]} транзакций")
    index += 1

work_wallets = wallets.copy()  # копируем список кошельков для работы

print("Начинаем работу\n")

while work_wallets:  # пока список кошельков для работы не пустой
    if random.randint(0, 1):
        wallet = random.choice(work_wallets)  # выбираем случайный кошелек для транзакции
        wallet_index = wallets.index(wallet)  # находим индекс кошелька в исходном списке
    else:
        min_transactions = min(transactions)  # находим минимальное количество транзакций
        wallet_index = transactions.index(min_transactions)  # находим индекс кошелька с минимальным количеством транзакций
        wallet = wallets[wallet_index]  # находим кошелек по индексу

    if transactions[wallet_index] < target_transactions:  # проверяем что кошелек еще не выполнил минимальное количество транзакций
        work_transaction = random.randint(1, 5)  # генерируем случайное количество транзакций
        transactions[wallet_index] += work_transaction  # добавляем случайное количество транзакций
        print(f"Кошелек {wallet} выполнил транзакций - {work_transaction} , всего транзакций - {transactions[wallet_index]}")
        time.sleep(random.uniform(0.1, 0.3))  # добавляем паузу

    if transactions[wallet_index] >= target_transactions:
        print(f"Кошелек {wallet} уже выполнил минимальное количество транзакций - {transactions[wallet_index]}")
        work_wallets.remove(wallet)  # удаляем кошелек из списка кошельков для работы
